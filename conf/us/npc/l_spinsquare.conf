[ga2.setting.GameSetting]

import ga2.data.*;
import kotori.gfx.*;
constants ga2.data.StageConstants;
constants ga2.data.UserItems;
constants ga2.client.ui.NPCTradePanel;
constants ga2.client.ui.BlacksmithSelectPanel;
constants ga2.data.TreasureTable;


///	広場1(街中) 500-599
//	
//	
//////////////////////////////////////////////////////////////////////////////// 
//スパークス
////////////////////////////////////////////////////////////////////////////////

npc[500] = #copyof(getNPCInfo( id("MF", 0) )){
	aitype = AI_WAIT;
	loungeemotion = 1;

	changeAvatarInfo = #(
		// クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=39; body=743; deco=470;	},
		// 2009クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-62; body=743; deco=470;	},
		// 2010クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-79; body=743; deco=470;	},
		// 2011クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-198; body=743; deco=470;	},
		// 2012クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-410; body=2233; deco=470;	},
		// 2013旧正月限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-563; body=1180; },
		// 2014旧正月限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-621; body=1180; },
		// 2013クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-607; body=2233; deco=470;	},
		// 2014クリスマス限定
		#NPCInfo$ChangeAvatarInfo(){ questid=-705; body=2233; deco=470;	}
	);

	talk = compile(){
		extends ga2.client.ui.TalkScript;

		void main(){
			illust(getIllustName("sparks_n"));

			//if(isDemo() || getVersion()<0 && isLanguage("ja")){	// デモのとき
			//	if(getVersion()<0) message("version未設定");
			//	debuggo();//経験値デバッグ挿入、コメントアウト
			//}

			updateServerTime();
/*
			//チュートリアル用クエスト会話
			if(checkQuestTutorial()){
				return;
			}
			
			//クエスト会話
			if(checkQuestGet()){
				return;
			}
*/			
			// 通常会話
			normal();
		}
		
		//チュートリアル用クエスト会話
		boolean checkQuestTutorial(){
			//クエスト125
			if(hasQuest(125) && questTalk(125, "sparks")) return true;
			//クエスト126
			if(hasQuest(126) && questTalk(126, "sparks")) return true;
			
			return false;
		}
		
		//クエスト会話
		boolean checkQuestGet() {
			// クエスト「クリスマス大作成」 
			if(questTalk(39, "sparks")) return true;
			// バレンタインクエスト「カカオDEゲット」 
			if(questTalk(40, "sparks")) return true;
			// クエスト「クリスマス大作成」 
			if(questTalk(62, "sparks")) return true;
			// 2010バレンタインクエスト 
			if(questTalk(64, "sparks")) return true;
			// 2010クリスマスクエスト
			if(questTalk(79, "sparks")) return true;
			// 2011バレンタインクエスト
			if(questTalk(130, "sparks")) return true;
			// ベトナム用クエスト
			if(questTalk(151, "sparks")) return true;
			// 2011クリスマスクエスト
			if(questTalk(198, "sparks")) return true;
			// 2012バレンタインクエスト
			if(questTalk(233, "sparks")) return true;
			//エイプリルフール
			if(questTalk(277,"sparks")) return true;
			// 2012クリスマスクエスト
			if(questTalk(410, "sparks")) return true;
			// 2013旧正月
			if(questTalk(563, "sparks")) return true;
			// 2013バレンタインクエスト
			if(questTalk(564, "sparks")) return true;
			// 2013エイプリルフール
			if(questTalk(278, "sparks")) return true;
			// 2013クリスマスクエスト
			if(questTalk(607, "sparks")) return true;
			// 2014旧正月
			if(questTalk(621, "sparks")) return true;
			// 2014バレンタインクエスト
			if(questTalk(616, "sparks")) return true;
			// 2014イースタークエスト
			if(questTalk(636, "sparks")) return true;
			// 2014エイプリルフール
			if(questTalk(279, "sparks")) return true;
			// 2014クリスマスクエスト
			if(questTalk(705, "sparks")) return true;
			
			//クエスト300
			if(questTalk(300, "sparks")) return true;
			//クエスト303
			if(questTalk(303, "sparks")) return true;
			return false;
		}
		
		//クエスト会話
		boolean checkQuestResult() {
			//クエスト7
			if(hasQuest(7) && questTalk(7, "sparks")) return true;
			//クエスト8
			if(hasQuest(8) && questTalk(8, "sparks")) return true;
			//クエスト9
			if(hasQuest(9) && questTalk(9, "sparks")) return true;
			//クエスト10
			if(hasQuest(10) && questTalk(10, "sparks")) return true;
			//クエスト11
			if(hasQuest(11) && questTalk(11, "sparks")) return true;
			
			return false;
		}
		
		// 通常会話
		void normal(){
			timewait(100);
			
			//クエスト成功失敗の会話
			if(checkQuestResult()) {
				return;
			}
			
			// イベントチェック
			if(checkQuestTalk()) {
				//特別なクエスト会話が発生した
				return;
			}
			
			if(true){//デフォルトトーク


				if(hasQall()){//あいさつ分岐//何かしらクエストを受けているときはメガフォース隊員口調
					emotion(null,9);
					message(" Agent " + getPlayerName("p") + "!#/...I always want to speak like this!");
				}else{
					emotion(null,1);
					switch( ((int)rndf(4)) ){
					case 0:
						voice(220);
						message("HI! Do you need help?",false);break;
					case 1:
						voice(153);
						message("HI! How are you?#/Do you need help?",false);break;
					case 2:
						voice(155);
						message("HI! Do you need help?",false);break;
					case 3:
						voice(161);
						message("HI~! Any Question For me?",false);break;
					}
				}

				//"経験値配布"はベータに入らない//周辺の命令文が若干変わる
//				switch( choose("調子はどう？","施設について教えて欲しい","あの人について教えて欲しい","経験値配布","なんでもない")){
				switch( choose("How are you?","Guideme!","NPC INFO","Nothing")){

				case 0://クエスト配布トーク
					howareyou();
					break;

				case 1://マップ案内トーク
					int maplist = 0;
					voice(166);
					message("Feel free to ask me anything about WINGDOM!",false);
					for(;;){
						if(maplist%10 == 0){
							switch( choose("Spin Square","GAT Stadium","Mega Force HQ","Prime Market","Next Page","Cancel")){
							case 0:
								message("You are at #bSpin Square#N Right now!#/");
								message("It a center of Wingdom #bWingdom#N and #/ a Meeting Spot too!");
								if(isChannelBBSEnabled()) {
								message("test");
								}
								message("test");
								break;
							case 1:
								message("test #bGAT tournament#N test");
								message("test #/ test!");
								message("test #bDolores#N test #bNoboru#N test!");
								message("test Rank test!");
								break;
							case 2:
								message("test #bMega Force Unit#N!#/test #/ test #bWingdom#N test!");
								message("test #/ test #rVal Shark Army#N #/test");
								message("test Wingdom test!");
								break;
							case 3:
								message("test #bPrime Market#N test!");
								message("test!#/ test test!");
								message("test test #/test Rank test! #/ test Rank test test!");
								break;
							case 4:
								maplist += 11;
								break;
							case 5:
								message("test! test? #/ test!");
								voice(219);
								message("test!");
								maplist += 2;
								break;
							}
						}else{
							switch( choose("Dojo","Future Lab","General's Office","Other","Previous Page","Cancel")){
							case 0:
								message("test?#/test...#test#N");
								message("Dojo test!#/test Master Sage test#/ test challenge test");
								message("test test Master Sage test #/ test");
								message("test #/ test!");
								break;
							case 1:
								message("test...#/GetAmped International Science Laboratory.#/ test test #bFuture Lab#N.");
								message("#bFuture Lab#N test #/test Accessory test GAT น่ะจ้ะ!");
								message("test #test#N test #bDiaper#N test#/ test! #/test #test#N test #/ test Accessory test");
								message("test #/ test #/ test");
								break;
							case 2:
								message("test General's Office test test #/#bGeneral#N test #bWingdom#N.");
								message("test test #bGeneral#N test #/#o#Ktest#N test Rank (test) test test");
								message("test ถ้าเธอขยันมากพอ!");
								break;
							case 3:
								message("test test... #/ test #bStreet Fight#N test?");
								message("#bStreet Fight#N test #/ test #/ test");
								message("test #bL.J.#N test #/ test Street Fight test#/test Street Fight!");
								break;
							case 4:
								maplist += 9;
								break;
							case 5:
								message("test! test?#/ test!");
								voice(219);
								message("test test!");
								maplist += 1;
							}
						}
						if(maplist >= 200 && maplist%10 == 2){
							hideMessage();
							timewait(400);
							message("...");
							illust(getIllustName("sparks_d"));
							voice(316);
							message("test....");
							return;
						}else if(maplist%10 == 2){
							return;
						}
					}
					break;

				case 2://キャラクタ紹介トーク
					voice(202);
					message("test!");
					message("test #bWingdom#N test!",false);
					showNPCIntro();
					message("test?#/ test test");
					voice(219);
								message("test!");
					break;

				case 3://デバッグトーク（削除項目）
					debuggo();
					break;
//				case 3:
//					voice(218);
//								message("บ๊าย บาย!");
//					break;
				}
			}
		}

		//調子はどう？（失敗、成功しているときはここに来ない）
		void howareyou(){
			int time = getTime();
			// 不正値チェック
			if((time+30)+30 < getValue(418)){
				setValue(418,time+30);
			}
			boolean min30 = (time > getValue(418));	//30分経過チェック

			if(getNormalQuestID() >= 0){	// クエスト進行中
				message("test test!");
				//message("雪が降ってるといつものスピンスクエアも静かに感じるね。");
				//message("風は冷たいけど体を動かしていれば寒くないよ！");
				message("test test test?");
				message("test test test");
			}else if(min30 && ((int)rndf(10)) == 0){
				switch(((int)rndf(4))){//イベント数によって変動
				case 0:
					questTalk(7, "sparks");	//リボン
					break;
				case 1:	
					questTalk(10, "sparks");	//花
					break;
				case 2:
					questTalk(11, "sparks");	//バルシャーク
					break;
				case 3:
					questTalk(9, "sparks");	//フラフープ
					break;
				case 4:
					questTalk(8, "sparks");	//宝石
					break;
				}
				setValue(418, time+30);
			}else if(min30 && ((int)rndf(100)) == 1){
				message("test #/test!");
				illust(getIllustName("sparks_l"));
				message("test!!#/test!");
				setValue(418, time+30);
				getScore(1500);
			}else{
				message("test");
				//message("風邪を引かないように気をつけてね★");
				message("test!#/ test!");
				if(min30){
					setValue(418, time+30);
				}
			}
		}

		// デバッグ用会話（削除項）ベータには入らないvoid
		void debuggo(){
		int i = 1;
			message("Debug Option",false);
			switch( choose("GIMME SCORE","GIMME ITEM","Money Time","Debug Episode","Choose Story Episode","DeleteItem","GUILD","Nothing")){
			case 0:
				debugscore();
				break;
			case 1:
				itemadd();
				break;
			case 2:
				message("FREAKING RICH!!!");
				getTreasure(5000000,#( 	#UserItems$Item(){ kind = ITEM_POINTRM; id = 999999999; }) );
				break;
			case 3:
				message("IYAAAAAAAAAAA!!");
				addEpisode(141);
				addEpisode(142);
				addEpisode(242);
				addEpisode(243);
				addEpisode(211);
				addEpisode(231);
				break;
			case 4:
				debugepisode();
				break;
			case 5:
				itemdelete();
				break;
			case 6:
				guildopen_relief();
				break;
			case 7:
				message("You WA SHOCK!...");
				break;
			}
			hideMessage();
			timewait(300);
		}
		
		void sepclear(){
			boolean b = addMasterTest(306, 310);
			if(b){
				message("クエストをクリア状態にしました");
			}else{
				message("クエストをクリア状態にできませんでした");
			}
			
			b = clearEpisodeTest(301, 350, false);
			if(b){
				message("ミッションをクリア状態にしました");
			}else{
				message("ミッションをクリア状態にできませんでした");
			}
		}
		
		void itemadd(){
			message("What ITEM You Want?",false);//どの種類のアイテムを消すの？
			int i = 0;
			int s = choose("Accessories","Valentine","Skill Card STR","Acc Core","Skill Card TRICK","Skill Card LIFE","Event","Add Our Baby");//"アクセサリ","武器","素材","エモーション","家具","ボイス","イベント","やっぱり消さない"
			switch( s){
			case 0: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2176; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2177; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2180; tuneup = 1613332480;},
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2181; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2301; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2334; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3556; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3604; tuneup = 1881784487; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1751; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3519; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3511; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3504; })
			); //ACC List
			break;
/*			case 1: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_VOICE; id = 3; },
			#UserItems$Item(){ kind = ITEM_VOICE; id = 6; },
			#UserItems$Item(){ kind = ITEM_VOICE; id = 12; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 2976; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1801; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1802; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3306; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1811; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1812; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1111; })
			); //Valentine Item
			break;
*/			case 1: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_MATERIAL; id = 705; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 704; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 706; num = 100; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1546; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1801; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1802; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 3306; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1811; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1812; },
			#UserItems$Item(){ kind = ITEM_ACCESSORY; id = 1111; })
			); //Valentine Item
			break;
			case 2: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_MATERIAL; id = 51; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 52; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 53; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 54; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 55; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 56; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 57; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 58; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 59; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 60; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 61; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 62; num = 100; })
			); //STR Skill Card
			break;
			case 3: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_MATERIAL; id = 405; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 411; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 612; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 613; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 614; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 901; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 902; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 903; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 1026; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 1027; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 1029; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 2026; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 2025; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 2021; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 2023; num = 100; })
			); //Other Meterial Skill Card
			break;
			case 4: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_MATERIAL; id = 152; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 151; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 154; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 155; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 156; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 157; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 158; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 159; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 160; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 161; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 162; num = 100; })
			); //Trick Skill Card
			break;
			case 5: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_MATERIAL; id = 252; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 251; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 254; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 255; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 256; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 257; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 258; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 259; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 260; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 261; num = 100; },
			#UserItems$Item(){ kind = ITEM_MATERIAL; id = 262; num = 100; })
			); //Life Skill Card
			break;
			case 6: 
			getTreasure(0,#( 	#UserItems$Item(){ kind = ITEM_ETC; id = 31; num = 1;},
			#UserItems$Item(){ kind = ITEM_EVENT; id = 32; num = 100; },
			#UserItems$Item(){ kind = ITEM_EVENT; id = 33; num = 100; },
			#UserItems$Item(){ kind = ITEM_RANK; id = 106; num = 1; },
			#UserItems$Item(){ kind = ITEM_RANK; id = 103; num = 1; },
			#UserItems$Item(){ kind = ITEM_RANK; id = 84; num = 1; },
			#UserItems$Item(){ kind = ITEM_ETC; id = 32; num = 1;})
			);
			//EVENT ITEM
			break;
			case 7:
				message("ONE BABY COMING UP!");//何も消さない？
				return;
			}
			message("Add Complete!");//消去完了！
		}
		
		void debugepisode(){
			message("What Story to unlock?",false);//どの種類のアイテムを消すの？
			int i = 0;
			int s = choose("CODE:SVH10","CODE:SVE09","CODE:SVE08","CODE:SVE07","CODE:SVE06","CODE:SVE05","Delte369","Hot Night with Spark");//"アクセサリ","武器","素材","エモーション","家具","ボイス","イベント","やっぱり消さない"
			switch( s){
			case 0: addEpisode(350); break;
			case 1: addEpisode(349); break;
			case 2: addEpisode(348); break;
			case 3: addEpisode(347); break;
			case 4: addEpisode(346); break;
			case 5: addEpisode(345); break;
			case 6: deleteEpisode(369); break;
			case 7:
				message("COME ON! DO IT NOW!!");//何も消さない？
				return;
			}
			message("Episode Added!");//消去完了！
		}
		
		
		void guildopen_relief(){//緩和版のギルド設立
			move("OBJ5",#V(-0.1,0,-0.05));
			timewait(250);
			int cost = 5000;
			message("Oh, it's you. ");
			showMoney(true);
			message("Do you want to make a #bguild#N?");
			switch(choose("Make a guild(" + cost + "W)","Cancel")){
				case 0:
					if(getGameMoney()<cost){	// 所持金不足
						message("Hey, you don't have enough to pay the fee for creating your guild.");
						message(" I can't treat you differently #/even if you are the General's favorite.");
						message("Save money and come back again!");
						message("To have #o#K"+cost+"W#N is easy for you, isn't it?");
						message("Good luck!");
						move("OBJ5",#V(0.1,0,0.05));
						return;
					}

					message("OK");
					message("Then, enter #bguild name#N in this registration form.");

					if(shopping(ITEM_ETC,2)){	// ギルドを作成した
						message("OK. I will register a #bguild#N under this name.");
						if(isWorldmapenabled()){	// ワールドマップを使うとき
							message("Enter #bguild headquaters#N from #l#NWorld Map.");
						}else{
							message("Click the Guild icon to enter the #bGuild Room#N, in the Destination Selection screen.");
						}
						message("Now you're #lCaptain#N" + getPlayerName("p") + "of this Guild!");
						message("Good luck.");
//						message("では、今日からは#b" + getGuildName() + "の" + getPlayerName("p") + "#l隊長#N、だな。");
					}else{	// ギルドの作成をキャンセル
						message("Good Bye Then");
					}

					break;
				case 1:
					message("Good Bye Then");
					break;
			}

			move("OBJ5",#V(0.1,0,0.05));
			timewait(50);
		}
		
		void itemdelete(){
			message("What ITEM to be Delete?",false);//どの種類のアイテムを消すの？
			int i = 0;
			int s = choose("Accessories","Weapon","Material","Emotion","Rank","Other","Event","Return");//"アクセサリ","武器","素材","エモーション","家具","ボイス","イベント","やっぱり消さない"
			switch( s){
			case 0: for(i=1;i<5000;i++) removeItem(ITEM_ACCESSORY,i); break;
			case 1: for(i=1;i<2000;i++) removeItem(ITEM_WEAPON,i); break;
			case 2: for(i=0;i<3000;i++) removeItem(ITEM_MATERIAL,i); break;
			case 3: for(i=0;i<1000;i++) removeItem(ITEM_EMOTION,i); break;
			case 4: for(i=0;i<2000;i++) removeItem(ITEM_RANK,i); break;
			case 5: removeItem(ITEM_ACCESSORY,3621); break;
			case 6: for(i=0;i<1000;i++) removeItem(ITEM_EVENT,i); break;
//			case 7: removeItem(ITEM_ACCESSORY,3621); break;
			case 7:
				message("Delete Your Life?");//何も消さない？
				return;
			}
			message("Delete Complete!");//消去完了！
		}
		
		void debugscore(){
			message("How much score?",false);//どの種類のアイテムを消すの？
			int i = 0;
			int s = choose("500000000","50000000","500000","500000","Score you?");//"アクセサリ","武器","素材","エモーション","家具","ボイス","イベント","やっぱり消さない"
			switch( s){
			case 0: 				
			message("HOLYSHIT!!!");
				getScore(2147483647);
				break;
			case 1: 
			message("KIMOCHIII!!!");
				getScore(739933109);
				break;
			case 2: 
			message("YAMETEEE!!!");
				getScore(500000);
				break;
			case 3: 
			message("YAMETEEE!!!");
				getScore(50000);
				break;
			case 4:
				message("Alight, I'll Beat your ass up now!!");//何も消さない？
				return;
			}
			message("What the use for?");//消去完了！
		}

		//挑戦中のスパークスクエストIDを返す
		int getNormalQuestID(){
			int i=7;
			for(;i<=11; i++){
				if(hasQuest(i)){
					return i;
				}
			}
			return -1;
		}

		//0-99何かしらの任務を受けているときにtrueを返す
		boolean hasQall(){
			int i;
			for(i=0; i<=99; i++){
				if(hasQuest(i)){
					return true;
				}
			}
			return false;
		}

		//指定したメッセージをプレイヤーが話す
		void playerTalk(String msg){
			illust("");
			speaker(getPlayerName("p"));
			message(msg);
		}
		//システムで話し、グラフィックとスピーカーをスパークスに戻す
		void systemTalk(String msg){
			systemTalk(msg,true);
		}
		void systemTalk(String msg,boolean ff){
			hideMessage();
			illust("");
			speaker("");
			message(msg,ff);
			if(ff){
				hideMessage();
				illust(getIllustName("sparks_n"));
				speaker(getPlayerName(null));
			}
		}

		boolean checkQuestTalk() {
			if(questTalk(58, "sparks")) return true;
			
			return false;
		}
		
		// イラスト名を返す
		String getIllustName(String name){
			// クリスマスクエストの格好をしているかチェック
			if(isChangeAvatar(39) || isChangeAvatar(62) || isChangeAvatar(79) || isChangeAvatar(410) || isChangeAvatar(607) || isChangeAvatar(705)){
				name = name + "_xmas";	// クリスマスイラスト
			}

			return name;
		}

	};
};



////////////////////////////////////////////////////////////////////////////////
//ぜんじろう（金田善次郎）
////////////////////////////////////////////////////////////////////////////////



